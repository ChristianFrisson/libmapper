name_allocation - multicast group 224.0.1.3 port 7571
{
	ID = random_number
	SEND: "/name/request <class> <ID>"
	if receive "/name/available <tentative_name> <number>" AND <number> matches <ID>
		SEND: "/name/probe <tentative_name>"
	else if timeout
	{
		tentative_name = class.<ordinal>
		SEND: "/name/probe <tentative_name>"
	}
	
	for (got_name==0)
	{
		if receive "/name/registered <name>" AND <name> matches <tentative_name>
		{
			choose new tentative_name by changing <ordinal>
			SEND: "/name/probe <tentative_name>"
		}
		else if timeout
		{
			my_name = tentative_name
			SEND: "/name/registered <my_name>"
			got_name = 1
		}
	}
	if (<ordinal>==1)
		is_name_host = 1
}

port_allocation - multicast group 224.0.1.3 port 7572
{
	ID = random_number
	SEND: "/port/request <ID>"
	if receive "/port/available <tentative_port> <number>" AND <number> matches <ID>
		SEND: "/port/probe <tentative_port>"
	
	for (got_port==0)
	{
		if receive "/port/registered <port>" AND <port> matches <tentative_port>
		{
			choose new tentative_port
			SEND: "/port/probe <tentative_port>"
		}
		else if timeout
		{
			my_port = tentative_port
			SEND: "/port/registered <my_port>"
			got_port = 1
		}
	}
	if <my_port> = starting port
		is_port_host = 1
}

mapping administration - multicast group 224.0.1.3 port 7570
{
	once port and name are established
		SEND: "/who"

	switch (received OSC)
	{
		CASE: "/who"
			SEND: "/registered <my_name> @numInputs <numInputs> @numOutputs <numOutputs> @IP <IP> @port <my_port>"
			break
		CASE: "/registered <name> @numInputs <numInputs> @numOutputs <numOutputs> @IP <IP> @port <port>" AND <name>!=my_name
			store name, IP, and port for reference
			break
		CASE: "/link /my_name /<other_device>"
			if not already linked
			{
				link to device
				SEND: /linked /my_name /<other_device>
			}
			break
		CASE: "/my_name/links/get" OR "/*/links/get"
			for (links_to_other_devices)
				SEND: /linked /my_name /<other_device>
			break
		CASE: "/my_name/namespace/get"
			for (parameters)
				SEND: /my_name/namespace/<input/output> /<parameter_name> @type <dataType> @units <units> @minimum <minimum> @maximum <maximum>
			break
		CASE: "/my_name/connections/get"
			for (connections)
			{
				SEND: /connected /my_name/<parameter_name> /<other_device>/<parameter_name>
				SEND: /connection/properties /my_name/<parameter_name> /<other_device>/<parameter_name> @scaling <bypass|mute|linear|expression|calibrate> @range <source_min> <source_max> <dest_min> <dest_max> @expression <expression> @clipMin <none|mute|clamp|wrap|fold> @clipMax <none|mute|clamp|wrap|fold>
			}
			break
		CASE: "/connection/properties/get /my_name/<parameter_name> /<other_device/<parameter_name>"
			SEND: /connection/properties /my_name/<parameter_name> /<other_device>/<parameter_name> @scaling <bypass|mute|linear|expression|calibrate> @range <source_min> <source_max> <dest_min> <dest_max> @expression <expression> @clipMin <none|mute|clamp|wrap|fold> @clipMax <none|mute|clamp|wrap|fold>
			break
		CASE: "/connect /my_name/<parameter_name> /<other_device>/<parameter_name> [optional properties: @scaling, @range, @expression, @clipMin, @clipMax]"
			create mapping connection
			SEND: /connected /my_name/<parameter_name> /<other_device>/<parameter_name>
			SEND: /connection/properties /my_name/<parameter_name> /<other_device>/<parameter_name> @scaling <bypass|mute|linear|expression|calibrate> @range <source_min> <source_max> <dest_min> <dest_max> @expression <expression> @clipMin <none/mute/clamp/wrap/fold> @clipMax <none/mute/clamp/wrap/fold>
			break
		CASE: "/connection/modify /my_name/<parameter_name> /<other_device>/<parameter_name> [connection properties]"
			alter mapping connection per received properties
			SEND: /connection/properties /my_name/<parameter_name> /<other_device>/<parameter_name> @scaling <bypass|mute|linear|expression|calibrate> @range <source_min> <source_max> <dest_min> <dest_max> @expression <expression> @clipMin <none|mute|clamp|wrap|fold> @clipMax <none|mute|clamp|wrap|fold>
			break
		CASE: "/disconnect /my_name/<parameter_name> /<other_device>/<parameter_name>"
			destroy mapping connection
			SEND: "/disconnected /my_name/<parameter_name> /<other_device>/<parameter_name>"
			break
		CASE: "/unlink /my_name /<other_device>"
			destroy network link to other device
			SEND: "/unlinked /my_name /<other_device>"
			break
//****************
		CASE: "/name/registered <class>.<ordinal>"
			if (is_name_host==1) AND (<class>==<myclass>)
				store <ordinal> for reference
			break
		CASE: "/name/request <class> <ID>"
			if (is_name_host==1) AND (<class>==<my_class>)
			{
				choose a <suggested_ordinal>
				SEND: "/name/available <class>.<suggested_ordinal> <ID>"
			}
			break
		CASE: "/port/registered <port>"
			if (is_port_host==1)
				store <port> for reference
			break
		CASE: "/port/request <ID>"
			if (is_port_host==1)
			{
				choose a free port
				SEND: "/port/available <suggested_port> <ID>"
			break
	}
}